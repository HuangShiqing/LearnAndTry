#include <vector>
using namespace std;

// 11. 盛最多水的容器
// 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0) 。
// 找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
// 说明：你不能倾斜容器。

// 示例 1：
// 输入：[1,8,6,2,5,4,8,3,7]
// 输出：49 
// 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

// 示例 2：
// 输入：height = [1,1]
// 输出：1

// 示例 3：
// 输入：height = [4,3,2,1,4]
// 输出：16

// 示例 4：
// 输入：height = [1,2,1]
// 输出：2
 
// 提示：
// n = height.length
// 2 <= n <= 3 * 104
// 0 <= height[i] <= 3 * 104

// -------------------第二次刷-----------------------
// 2021年6月8日14:58:36
// 准备第一次社招
// 思路:
// 双指针
// 一开始，我们考虑相距最远的两个柱子所能容纳水的面积
// 然后如果移动高的柱子，那么水的高度一定不会增加，且宽度一定减少，因此可以减少搜索空间，移动短的柱子

class Solution {
public:
    int maxArea(vector<int>& height) {
        int i = 0;
        int j = height.size()-1;
        int maxAres = -1;
        while(i<j)
        {
            maxAres = max((j-i)*min(height[i],height[j]),maxAres);

            if(height[i]<height[j])
                i++;
            else
                j--;
        }
        return maxAres;
    }
};