#include <fstream>
#include <iostream>
#include "monster_generated.h"  // This was generated by `flatc`.
using namespace MyGame::Sample; // Specified in the schema.

int main()
{
    std::ifstream infile;
    infile.open("monster.mnn", std::ios::binary | std::ios::in);
    infile.seekg(0, std::ios::end);
    int length = infile.tellg();
    infile.seekg(0, std::ios::beg);
    char *buffer_pointer = new char[length];
    infile.read(buffer_pointer, length);
    infile.close();

    // uint8_t *buffer_pointer = data;/* the data you just read */
    // Get a pointer to the root object inside the buffer.
    auto monster = GetMonster(buffer_pointer);

    // scaler
    auto hp = monster->hp();
    auto mana = monster->mana();
    std::cout << "hp: " << hp << std::endl;
    std::cout << "mana: " << mana << std::endl;
    // string
    auto name = monster->name()->c_str();
    std::cout << "name: " << name << std::endl;
    // struct
    auto pos = monster->pos();
    auto x = pos->x();
    auto y = pos->y();
    auto z = pos->z();
    std::cout << "x,y,z: " << x << y << z << std::endl;
    // vector
    auto inv = monster->inventory(); // A pointer to a `flatbuffers::Vector<>`.
    auto inv_len = inv->size();
    auto third_item = inv->Get(2);
    std::cout << "inventory size: " << inv_len << std::endl;
    std::cout << "inventory[2]: " << third_item << std::endl;
    // vector of table
    auto weapons = monster->weapons(); // A pointer to a `flatbuffers::Vector<>`.
    auto weapon_len = weapons->size();
    auto second_weapon_name = weapons->Get(1)->name()->str();
    auto second_weapon_damage = weapons->Get(1)->damage();
    // union
    auto union_type = monster->equipped_type();
    if (union_type == Equipment_Weapon)
    {
        auto weapon = static_cast<const Weapon *>(monster->equipped()); // Requires `static_cast`
                                                                        // to type `const Weapon*`.
        auto weapon_name = weapon->name()->str();                       // "Axe"
        auto weapon_damage = weapon->damage();                          // 5
        std::cout << "weapon_name: " << weapon_name << std::endl;
        std::cout << "weapon_damage: " << weapon_damage << std::endl;
    }
    return 0;
}